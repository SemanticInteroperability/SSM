<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- todo
        动态SQL：
        1、if，通过test属性中的表达式判断标签中的内容是否有效（是否会拼接到sql中）
        2、where
        a.若where标签中有条件成立，会自动生成where关键字
        b.会自动将where标签中内容前多余的and去掉，但是其中内容后多余的and无法去掉
        c.若where标签中没有任何一个条件成立，则where没有任何功能
        3、trim
        prefix、suffix：在标签中内容前面或后面添加指定内容
        prefixOverrides、suffixOverrides：在标签中内容前面或后面去掉指定内容

        -->

<mapper namespace="com.atguigu.mybatis.mapper.DynamicSQLMapper">
<!--    List<Emp> getEmpCondition(Emp emp);-->
    <select id="getEmpConditionOne" resultType="Emp">
        select * from emp where 1=1
        <if test="empName != null and empName!=''">
            emp_name=#{empName}
        </if>
        <if test="age != null and age!=''">
             and age=#{age}
        </if>
        <if test="gender != null and gender!=''">
            and gender=#{gender}
        </if>
    </select>


    <select id="getEmpConditionTwo" resultType="Emp">
        select * from emp
        <where>
            <if test="empName != null and empName!=''">
                emp_name=#{empName}
            </if>
            <if test="age != null and age!=''">
                and age=#{age}
            </if>
            <if test="gender != null and gender!=''">
                and gender=#{gender}
            </if>
        </where>
    </select>


    <sql id="empColumns">
        emp_id,emp_name,age,gender,dept_id
    </sql>
    <select id="getEmpCondition" resultType="Emp">
        select <include refid="empColumns"></include> from emp
        <trim prefix="where" suffixOverrides="and">
            <if test="empName != null and empName!=''">
                emp_name=#{empName} and
            </if>
            <if test="age != null and age!=''">
                age=#{age} and
            </if>
            <if test="gender != null and gender!=''">
                 gender=#{gender}
            </if>
        </trim>
    </select>


<!--    void insertBatchEmps(@Param("emps") List<Emp> emps);-->
    <insert id="insertBatchEmps">
        insert into emp values
        <foreach collection="emps" item="emp" separator=",">
            (null,#{emp.empName},#{emp.age},#{emp.gender},null)
        </foreach>
    </insert>


<!--    void deleteBatchEmps(@Param("empIds") Integer[] empIds);-->

    <delete id="deleteBatchEmps">
        delete from emp where emp_id in
        (
            <foreach collection="empIds" item="empId" separator=",">
                #{empId}
            </foreach>
        )
    </delete>

</mapper>
